PEP (Python Enhancement Proposals)

PEP 8 - How to format your code

PEP 20 - The Zen Of Python (import this)
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

Formatting
	2 lines between functions
	That is the number of lines PEP Eight recommends
	"Sparse is better than dense" -- The Zen of Python

I recommend using the form presented in Google's Python Style Guide.
Documenting Your Code - Docstrings
	def fetch_words(items):
		"""Fetch a list of words from an iterable series of items.
		
		Usage:
			Description of usage
			
		Args:
			An iterable series of items
			
		Returns:
			A list of strings		
		"""
		pass
	
	It is sometimes necessary to explain why a particular approach
	has been chosen or a particular technique used.
	We can do that using Python in-line comments with a hash.
	# This would explain why a particular technique has been used.
	
Shebang!
	Unix systems have the shebang as the first line of the file.
	The shebang allows the program loader to identify which interpreter
	to use to run the program.
	This will identify if the Python code is 2 or 3.
	Example:
		#!/usr/bin/env python3
	The exact details of your shebang depend on the location
	of Python on your system.

chmod command
	On Linux, you must mark your script as executable
	using the chmod command before the shebang will have any affect.
	Example:
		chmod +x demo.py


Escaping
put an 'r' in the front of a string instead of escaping characters
Example:
	r'C:\\dev\Python\zen_of_python\notes.txt'

help(str)
get some help on the str class

str.partition
>>> 'Maryland:Abingdon'.partition(':')
('Maryland', ':', 'Abingdon')

str.join
>>> ':'.join(['Maryland', 'Abingdon'])
'Maryland:Abingdon'

packages
	all lowercase
	no underscores
modules
	all lowercase
	separate words with underscores
classes
	Pascal case
methods
	lower case
	separate words with underscores
functions
	lower case
	separate words with underscores
constants
	all upper case
	separate words with underscores


Python Execution Model
	Any py file is a module
	Python Module
		Convenient import with API
	Python Script
		Convenient execution from command line
	Python Program
		Perhaps composed of many modules
	
__name__
	allows a module to detect if it has been run as a script
	or imported into another module

Always use this
Modules can be written for convenient import or execution by using:
	if __name__ == '__main__'

Module code is only executed once on first import

import sys
if __name__ == '__main__':
	print(sys.argv[1])


In libraries that will be used by others, type hints add a lot of value.
Other code using your libraries need these type hints to be properly type checked itself.
In bigger projects, type hints help you understand how types flow through your code
and are highly recommended.
Type hints are even more valuable in projects where you cooperate with others.


Document exceptions
Document arguments
Document returns
Document purpose of function




=========================================================================================================
Automation Framework Notes

Most important things for success
	- have a separate automation framework
		Web App <--- Framework <--- Tests
		anytime a test wants to do something, it calls a method in the framework!
	
	- tests should be simple
		each test is going to express what it does in simple terms and simple language
		make it as easy as possible to understand the tests
		When a test is simple, the test can easily be modified and updated!
		The automation framework should be easy enough to use so that others can use your code to write tests!
	
	- our tests drive the creation of the framework
		build the framework out as you need to implement new tests	
		do a little bit of design up front, but let the tests drive the design of the framework
	
	- do NOT create the framework first
		you are spending a lot of time and have NOTHING TO SHOW FOR It
		you have to make A LOT of GUESSES about how the framework will be used and you are LIKELY TO BE WRONG
		
	- make the tests as easy and expressive as possible
		put the difficult logic in the framework
		

Our Basic Architecture
	Bash Script (setup, execute test flows, cleanup)
	Test Flow (unittest classes)
	Test Cases
	Automation Framework (REST, UI, Interop, Websockets)
	AFATDS
	** Each layer only interacts with the layer beneath it **
	
Page Object Model (POM) (aka "Page Pattern")
	the methods on a page class should correspond to the actual actions a user can do on the page
		and not just the UI elements
	COMMON MISTAKE = modeling every user interface element
	BETTER WAY = think about the action the user would do
	The tests are less complicated when modeling actions the user takes
	We do not want someone that uses the automation framework to need to understand how to properly
		order and integrate all the UI elements to write a test

	Example:
		Searching Posts
			This method would know how to enter text in a text box
			then it would click the search button
		** Combine 2 individual actions into one thing that the user wants to do
		
		def search_posts(post: str) -> None:
			driver.get_element_by_id('searchTextBox').send_keys(post)
			driver.get_element_by_id('searchBtn').click()
			
		Usage:
			PostsPage.search_posts('Wawa')
		
Automation Framework Architecture
	Workflows
	Pages
	Selenium
	** Each layer only interacts with the layer beneath it **
	
Workflows
	Bigger than a single page
	Things outside the scope of a single page
	If there is a process that spans several pages, create a workflow class
	
Navigation
	navigation elements that appear across many pages should have their own page object
	
Thinging about Ease Of Use
	Experience will guide you
	Over time, you'll get a better idea of what you should do

	Example 1:
		driver = Driver()
		login_page = LoginPage(driver)
		login_page.go_to()
		login_page.enter_user_name("Joe")
		login_page.enter_password("Abc12#$")
		login_page.login_button.click()
		
	Example 2:
		LoginPage.go_to()
		LoginPage.login("Joe", "Abc12#$")
		
	Which one is better?
	In Example 2, the driver is global and the page objects are static classes.
	Keep this in mind for your future projects.

	NEVER require tests to declare variables
	NEVER require tests to create new objects
	NEVER require tests to manage state on their own
	NEVER expose the browser or DOM to the tests or let them manipulate it directly
	
	ALWAYS reduce the number of parameters for API calls when possible
		- don't make methods that have 15 parameters
	ALWAYS use default values instead of requiring parameters when possible
		- use sensible default values to reduce the number of parameters
	
	PREFER to make the API easier to use over making the internals of the API less complex
	PREFER using enumerations and constants to requiring the tests to pass in primitive types
		Example:
			Creating a customer requires the selection of male or female.
			Do not pass in a string "male" or a string "female" to the method.
			Pass in an enumeration to represent MALE and FEMALE.
	
			from enum import Enum
			class Sex(Enum):
				FEMALE = 1
				MALE = 2
				
			Usage:
				create_customer('Bob', Sex.MALE)
	
	Static Methods
		** We DO NOT use static methods in our page objects because of the requirement to run multiple
		** instances of AFATDS on the same operating system.
		However, generally for automation frameworks, static methods are appropriate
		The tests are easier to write with static classes and static methods
		In Python, static methods have the @classmethod attribute above the method
	
	Do not consider what is easier to implement in the automation framework.
	Consider what is easier to write the tests.
	
	
Errors VS Failures
	*** Confidence in the automation occurs when tests are failing only when the thing that they are testing actually fails ***
	Assertions are what you are testing
	If a test fails for ANY other reason, we want to log this as an error in the automation
	The report should show what is broken vs what is actually a failure in the SUT
	We want to do this in a lot areas in our application
	
	Failures
		The condition being tested was not met
		An assert in the test failed
		
	Test Error
		Something other than what was being tested failed
		The framework threw an exception
		Stop the test
	
Enumeration Example	
	Example:
          Creating a baseball team requires the selection of either "American" or "National" for the league.
          Do not pass in the string "American" or the string "National" to the method.
          Pass in an enumeration to represent AMERICAN and NATIONAL.

          from enum import Enum
          class League(Enum):
              AMERICAN = 1
              NATIONAL = 2

          Usage:
          create_baseball_team("Orioles", League.AMERICAN)


	






















































